from turtle import Terminator  # manual
from tkinter import TclError  # use hint
import colorsys
import turtle
from colorama import Fore, Style, init
init(autoreset=True)


# use hint and google

def get_color_for_tree(depth, max_depth):
    hue = depth / max_depth
    r, g, b = colorsys.hsv_to_rgb(hue, 0, 0)
    return (int(r * 255), int(g * 255), int(b * 255))

# –î–µ—Ä–µ–≤–æ –ø—ñ—Ñ–∞–≥–æ—Ä–∞ –∑ –∫—É—Ç–∞–º–∏, –≥—ñ–ª–∫–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–µ–∫—É—Ä—Å—ñ—é


def tree_of_pifagor(t, depth, size, angle, max_depth):
    if depth <= 0 or size < 2:
        return

    t.pencolor(get_color_for_tree(depth, max_depth))
    t.forward(size)
    t.right(angle)

    tree_of_pifagor(t, depth - 1, size * 0.9, angle, max_depth)

    t.left(angle * 2)

    tree_of_pifagor(t, depth - 1, size * 0.9, angle, max_depth)

    t.right(angle)
    t.backward(size)

# –í–∏–∫–ª–∏–∫ —Ä–µ–∫—É—Ä—Å—ñ—ó —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º–∞–ª—é–≤–∞–Ω–Ω—è


def draw_tree_of_pifagor(depth):
    try:
        window = turtle.Screen()
        window.setup(width=900, height=800)
        window.bgcolor("white")

        turtle.colormode(255)

        size = 600 / (depth + 1)
        t = turtle.Turtle()
        t.speed(5)
        t.penup()
        t.goto(0, -300)
        t.left(90)
        t.forward(size)
        t.pendown()
        # t.hideturtle()

        tree_of_pifagor(t, depth, size, angle=45, max_depth=depth)
        window.mainloop()
    except TclError:
        print(
            f"{Fore.LIGHTRED_EX}[‚ùå] –í–∏ –∑–∞–∫—Ä–∏–ª–∏ –≤—ñ–∫–Ω–æ –≤—Ä—É—á–Ω—É.[‚úîÔ∏è] –ú–∏ –ø—Ä–µ—Ä–≤–∞–ª–∏ –º–∞–ª—é–≤–∞–Ω–Ω—è!{Style.RESET_ALL}")
    except Terminator:
        print(
            f"{Fore.LIGHTRED_EX}[üëâ]–í—ñ–∫–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É, —Ç–æ–±—Ç–æ –º–∞–ª—é–≤–∞–Ω–Ω—è. Turtle –∑—É–ø–∏–Ω–∏–≤—Å—è.[üíÄ]{Style.RESET_ALL}")


if __name__ == "__main__":
    try:
        print(
            f"{Fore.CYAN}[üòä] –°–ø—Ä–æ–±—É–π –ø–æ–±—É–¥—É–≤–∞—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª --> <–î–µ—Ä–µ–≤–æ –ü—ñ—Ñ–∞–≥–æ—Ä–∞>. –í–≤–µ–¥–∏ —Ä—ñ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å—ñ—ó –≤—ñ–¥ 1 –¥–æ 10.{Style.RESET_ALL}")
        user_input = input(
            f"{Fore.BLUE}–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å—ñ—ó: {Style.RESET_ALL}")
        user_input = int(user_input)
        if 0 < user_input <= 10:
            draw_tree_of_pifagor(user_input)
        else:
            print(
                f"{Fore.RED}[üëâ]–ß–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 1 —Ç–∞ –Ω–µ –±—ñ–ª—å—à–µ 10{Style.RESET_ALL}")
    except ValueError:
        print(
            f"{Fore.RED}[üî•]–í–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ. –≤—ñ–¥ 1 –¥–æ 10. [üôè] –ë—É–¥—å –ª–∞—Å–∫–∞{Style.RESET_ALL} ")
