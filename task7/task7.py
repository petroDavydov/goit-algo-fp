import numpy as np
import matplotlib.pyplot as plt
from colorama import Fore, Style, init
init(autoreset=True)

# –§—É–Ω–∫—Ü—ñ—è —Å–∏–º—É–ª—è—Ü—ñ—ó –∫–∏–¥–∞–Ω–Ω—è


def simulation_dice_roll(count_dice_role):
    sum_count = {i: 0 for i in range(2, 13)}

    # —Å–∏–º—É–ª—è—Ü—ñ—è –∫–∏–¥–∫—ñ–≤ –∫—É–±—ñ–∫–∞
    for _ in range(count_dice_role):
        dice1 = np.random.randint(1, 7)  # –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∏—Å–ª–∞ –ø–µ—Ä—à–æ–≥–æ –∫—É–±—ñ–∫–∞
        dice2 = np.random.randint(1, 7)  # –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∏—Å–ª–∞ –¥—Ä—É–≥–æ–≥–æ –∫—É–±—ñ–∫–∞
        result_diecs = dice1+dice2  # —Å—É–º–∞ –∫—É–±—ñ–∫—ñ–≤
        sum_count[result_diecs] += 1  # –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–º–∏

    probabilities = {key: count / count_dice_role for key,
                     count in sum_count.items()}  # –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
    # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É –≤—ñ–¥—Å–æ—Ç–∫–∏
    probabilities_procent = {s: p * 100 for s, p in probabilities.items()}

    return probabilities_procent, sum_count  # –¥–æ–¥–∞–Ω–æ sum_count –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω—É–∫—ñ–≤

# –î–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞


def plot_probabilities(probabilities_procent):
    sums = list(probabilities_procent.keys())  # –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤-—Å—É–º
    # –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π-–∑–Ω–∞—á–µ–Ω—å —É %
    prob = list(probabilities_procent.values())

    plt.figure(figsize=(10, 8))
    plt.title("Probability of Each Sum")
    plt.bar(sums, prob, color="lightgreen")
    plt.xlabel("SUM")
    plt.ylabel("PROBABILITY (%)")
    plt.xticks(sums)
    # –∑–º—ñ–Ω–µ–Ω–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫, –±—É–ª–æ plt.ystics(prob)
    plt.yticks(np.arange(0, max(prob) + 1, step=2))
    plt.grid(axis="y", linestyle="-", alpha=0.5)
    plt.show()


if __name__ == "__main__":

    user_input = input(f"{Fore.LIGHTMAGENTA_EX}–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º—É–ª—è—Ü—ñ–π: ")

    try:
        count_dice_role = int(user_input)
        if count_dice_role <= 0:
            print(f"{Fore.RED}–ß–∏—Å–ª–æ üìõ –ù–ï –º–∞—î –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º! {Style.RESET_ALL}")
            exit()
    except ValueError:
        print(f"{Fore.LIGHTRED_EX}–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —Ü—ñ—Å–ª–æ!{Style.RESET_ALL}")
        exit()

    probabilities_percent, sum_count = simulation_dice_roll(count_dice_role)

   # –ù–∞—è–≤–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
    theoretical_probabilities = {
        2: "2.78% (1/36)", 3: "5.56% (2/36)", 4: "8.33% (3/36)", 5: "11.11% (4/36)",
        6: "13.89% (5/36)", 7: "16.67% (6/36)", 8: "13.89% (5/36)", 9: "11.11% (4/36)",
        10: "8.33% (3/36)", 11: "5.56% (2/36)", 12: "2.78% (1/36)"
    }

    # –¢–∞–±–ª–∏—á–Ω–∏–π –≤–∏–≤—ñ–¥
    print(f"\n{Fore.LIGHTWHITE_EX}{Style.BRIGHT}{'–°—É–º–∞':^6} | {'–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å (–ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ)':^30} | {'–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å (–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞)':^20} | {'–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (%)':^14}{Style.RESET_ALL}")
    print(f"{Fore.LIGHTBLACK_EX}{Style.BRIGHT}{'-'*6} | {'-'*30} | {'-'*20} | {'-'*14}{Style.RESET_ALL}")

    for s in range(2, 13):
        monte_carlo_prob = probabilities_percent[s]
        theoretical_prob = float(theoretical_probabilities[s].split("%")[0])
        deviation = monte_carlo_prob - theoretical_prob
        deviation_sign = "+" if deviation >= 0 else "-"

        monte_carlo_str = f"{monte_carlo_prob:.2f}% ({sum_count[s]}/{count_dice_role})"
        theoretical_str = f"{theoretical_prob:.2f}%"
        deviation_str = f"{deviation_sign}{abs(deviation):.2f}%"

        print(f"{Fore.LIGHTBLUE_EX}{s:^6}{Style.RESET_ALL} | {monte_carlo_str:^30} | {theoretical_str:^20} | {deviation_str:^14}")

    plot_probabilities(probabilities_percent)
